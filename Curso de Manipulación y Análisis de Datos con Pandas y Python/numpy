tres= np.array([[[1,2,3],[-1,-2,-3]],[[4,5,6],[-4,-5,-6]]])
print(tres)
print(type(tres))
print(tres.ndim)

[[[ 1  2  3]
  [ 1  2  3]]

 [[ 4  5  6]
  [-4 -5 -6]]]
<class 'numpy.ndarray'>
3


ndim /e usa para ver las dimensiones de los array

_______________________________

ZEROS

zeroarray=np.zeros(10)
print(zeroarray)
[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]


zeroarray= zeroarray.astype(int)
print(zeroarray)
[0 0 0 0 0 0 0 0 0 0]

funcion astype // tipo de datos en numpy

onesArray= np.ones(10)
print(onesArray)

[1. 1. 1. 1. 1. 1. 1. 1. 1. 1.]

suma de matrix

matrix= np.array([[1,2,3],[4,5,6]])
print(matrix)
print(matrix+2)
[[1 2 3]
 [4 5 6]]
incrmentode la matrix en dos por cada valor
[[3 4 5]
 [6 7 8]]

DECREMENYOO EN 2(-2)
print(matrix-2)
[[-1  0  1]
 [ 2  3  4]]

DICIDE POR 2
print(matrix/2)

ELVADO A LA 2
print(matrix**2)
[[ 1  4  9]
 [16 25 36]]
 
 SUMAR DOS MATRIX
 print(matrix11 + matrix22)
 
 ESTAR DO MATRICES
 print(matrix11 - matrix22)
 
 PROMEDIO
 np.mean(minimo)
 
 DESVIACION STANDAR DE LOS ARRAYS
 STD = Standard Deviation
 
 np.std(minimo)
 
 ARANGE //
 cre un arreglo con los parametros insertados de inio y final
 arre=np.arange(12,20)
print(arre)
[12 13 14 15 16 17 18 19]

print(arre[2:5])

[14 15 16 17]

FULL
//devuelve un arrreglo con la entra introducida pr parametros
prefillarray= np.full(10,0)
print(prefillarray)
[0 0 0 0 0 0 0 0 0 0]  


AGREGAR UN NIEVO EJE newaxis

newaxis
#Puede usar np.newaxispara agregar un nuevo eje:
a2 = a[np.newaxis, :]
a2.shape
(1, 6)

empty(shape, dtype=float, order='C')


 

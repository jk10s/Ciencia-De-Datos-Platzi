Series
pd.__verion__
pd.Series(diccionario) /// convertir un diccionario nomrla en series
pd.DataFrame
pd.DataFrame(diconario, index=['var']) ///realiza el indice con nombres que asignemos
pd.columns
pd.values
varible.loc[''] filtros por noombre primero la fila y luego la column[f,c]
          ILOC     // acedes a los alrores atravez delas posiciones
varible.iloc[] ///filtros con indices y trae registro
varible.query(edad>12) // consultas con condiciones

pagina web bases de datos 
https://www.kaggle.com/


leer archivos 

pd.read_excel(direc_pandas.format('archivo.xlsx')) // lectura del aarchivo en jupyter
pd.read_excel(direc_pandas.format('archivo.xlsx')) creacion de archivo jason
pd.read_json(direc_pandas.format('archivo.json')) // lectura del archivo .json

guradadr archivos
direc_pandas='jk10s/{}' // creamo seldirecctorio donde lo vamos aguradar 
dir_pandas='jk10s/{}'.format('test.csv')  crecacion del archivo
df_name.to_pickle(direc_pandas.format('t.pkl')) creacion delalrchivo pika el recomendable para trabajar
df_name.to_hdf(direc_pandas.format('t.hdf'), key='data',format='table')
df_name.to_csv(dir_pandas)

IMPLACE // los datos que re-hagan van a quedar gurdados automaticamnete

el tipo de archivo hdf es optimo para trabajar en bigdata
otro optimo es el paquet

astype //convertit tipos de datos en los dataframes
df_meteories[['fall', 'nametype']].astype('category')

df.nunique() /// para saber la variedad de los datos
df_nmae.dtypes ////saber el tipo de variable
vaaribledtypes /// varibles del datframe

varible.tail(2)  /// juestra las filas que proporsione 
varible.sample(10) // proporsiona las filas  aleatorias (eneste caso 10)
m.convert_dtypes().dtypes

CONVIERTE EN VARIABLES CATEGORICAS
m[['fall','nametype']]=m[['fall','nametype']].astype('category') conveirte en catergory
CONVERTIR EN VARIABLES DUMIS
pd.get_dummies(m['fall']) convierte aribles categoricas a  dummles a ceros y unos de texto a numm

pd.to_datetime(
m['year'],
     errors = 'coerce',
     format = '%m/%d/%Y %H:%M:%S %p'
)
las conveirte en datatime con esos parametros
df['ObservationDate']= pd.to_datetime(df['ObservationDate']) // convierte a datime sin parametros


m.rename(columns={'mass (g)':'masss'},inplace=True) renombre el nombre de la coluna

list(vaariable)  /// lsta los nombres del dataframe

m.head(5) // muestra las primeros cinco elementos
m.tail(10) /// ultimo s 5 registros
list(m.columns) /// devuelve una lista con los nombres de las columnas
m.index /// min index and max index for step (1) by general
m.sample(5) /// los 5 registros aleatorios
m.shape //ver el numero de filas y  columnas
m.size /// total de regitro filas x columnas
m.describe() // datos estadisticos con porcentajes
m.describe(include='all') // detalles de todos los datoas
m.info() // saber cual es a categoria de las varibles
m.convert_dtypes(.dtypes // conveirte los tipos de datos po rej objet a string que perimte agilizar  el procesmeinto de los datos 

ELIMINAR
m.drop(['ones'], axis=1, inplace=True) ///  #codigo para eliminar a columna ones el axis o para indice y 1 para columna
m.drop([0,2,4,6]) /// #eliminar filas por indices
m.drop(columns=['id','recclass'],index=[1,2,3,4]).head(6) // #eliminar filas y columnas alvez
COPIAR 
df_ = m.copy(deep=True) // #hacer coopi profunda

si se filtra una sola columna por ejemplo m['nombre_de_una_columna'] se obtendra una series si sonnmasde dos  son dataframe
avanzados 
lo['hour']=lo['timestamp'].dt.hour /7#crea un nueva columna de nombre hour 
df = lo.iloc[:,1:] //  
df['wind_speed']*2 /// multiplica  por dos una columna

df_po['year']= pd.Categorical(df_po['year'].apply(str)) /// convierte el tipo de dato year a category
idc_filtro=df_po['Country'].isin(['Aruba','Colombia']) // filtro de paisespor aruba y colombia los convierte boolean
df_sample=df_po[idc_filtro] // aplicando el anterior codigo fltro 
df_sample.set_index(['Country','year']).sort_index() /// mismo anterior pero ordenado

FUNCION ISIN /// crea un vector varibles  boleanas

pob.isna().sum() /// suma de cadacoumna de los null
df_books.loc[0:4, ['Name','Author']] //// los primeros cuatro registros con la columna name and Author
df_books.loc[:, ['Reviews']] * -1 // convertir un acolumna el negativos

CATEGORICAL
pd.Categorical(dfp['year'].apply(str))	 // Conveirte a tipo de arible categorica 

UNSTACK
df_sample.unstack('Country') // cambiaar donde staban la c colunas ahora son la filas y donde esta flas ilas hoara las columnas

IndexSlice
ids = pd.IndexSlice /// permite hacer slice con valores STRING eje aruba austria 
df_countries.loc[ids['Aruba':'Austria','2015':'2017'],:].sort_index()


GROUPBY
df_time = jk.groupby(['ObservationDate']).sum() //agrupa por observ... sacando el  promedio

dataframe.diif()  //resta cada dia con el dia previo es decir como aumentan los casos dia a dia
df_time.diff().mean() //#promedio de casos durante un esos tres meses por dia
df_time.head(1).to_dict() /// se sacaa un diconario (1° registro) para usar su estructura en la siguinete celda
FILLNA 
//llena los valores nan por el que quiera signarse
fillna //#fillna para uitar los nan qu estaban en la priera fila
df_diff.resample('M').sum() // #suma de mes
df_diff.resample('W-sun').sum() // #cada domingo
datatime.bfill //copea el valor siguinete donde estaba el valor nulo
datafrma.interpolate()
GROUPER // sus parametrosson key=column_a_agrupar freq=frecuecia

df_cum.groupby(pd.Grouper(key='ObservationDate', freq = 'M'))[['rate']].mean() //#goupperconpara series de tiempo el timepo no pertence al indice #se saca el promdio por mes de la tasa de supervivencia por mes

RESET index 
df_cum = df_cum.reset_index() 

PLOT
varible.legend // para nombrar los ejes de la grafica

...KIND
kind=bar // grafico de barras
kind=pie // grafico de pastel circular
bar' or 'barh' for bar plots.
'hist' for histogram.
'box' for boxplot.
'kde' or 'density' for density plots.
'area' for area plots.
'scatter' for scatter plots.
'hexbin' for hexagonal bin plots.
'pie' for pie plots.
...stacked = True se sobrepone todas la barrras
...figsize = (10,7) definir el tamaño del grafico
...binds= ni idea

PIVOT
pivotea la tabla cambia las columnas en filas y filas en columnas
exites varios apramtros de la funcion pivot
...values // los valores que se obtendran del dataframe
...index // donde va a quedar la filas
...columnas //donde va a quedar las columnas
